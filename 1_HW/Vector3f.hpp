#include <iostream>
#include <cmath>
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
class Vector3f_t
{
    private:
        double x;
        double y;
        double z;
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
    public:
        Vector3f_t(double ax = 0, double ay = 0, double az = 0)
        {
            x = ax;
            y = ay;
            z = az;
        }
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
        ~Vector3f_t() = default;
//-----------------------------------------------------------------------------------------------------------
//											ПРИСВАИВАНИЕ И КОПИРОВАНИЕ														
//-----------------------------------------------------------------------------------------------------------
        Vector3f_t &operator = (Vector3f_t &other)
        {
            this->x = other.x;
            this->y = other.y;
            this->z = other.z;
            return *this;
        }
//-----------------------------------------------------------------------------------------------------------
        Vector3f_t &operator = (Vector3f_t &&other)
        {
            this->x = other.x;
            this->y = other.y;
            this->z = other.z;
            return *this;
        }
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
        Vector3f_t &operator = (const Vector3f_t &other)
        {
            this->x = other.x;
            this->y = other.y;
            this->z = other.z;
            return *this;
        }
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
        Vector3f_t(Vector3f_t &other)
        {
            this->x = other.x;
            this->y = other.y;
            this->z = other.z;
        }
//-----------------------------------------------------------------------------------------------------------
        Vector3f_t(Vector3f_t &&other)
        {
            this->x = other.x;
            this->y = other.y;
            this->z = other.z;
        }
//-----------------------------------------------------------------------------------------------------------
        Vector3f_t(const Vector3f_t &other)
        {
            this->x = other.x;
            this->y = other.y;
            this->z = other.z;
        }
//-----------------------------------------------------------------------------------------------------------
//													СЛОЖЕНИЕ += 														
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t &operator += (Vector3f_t &other)
    {
        this->x += other.x;
        this->y += other.y;
        this->z += other.z;
        return *this;
    }
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t &operator += (const Vector3f_t &other)
    {
        this->x += other.x;
        this->y += other.y;
        this->z += other.z;
        return *this;
    }
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t &operator += (Vector3f_t &&other)
    {
        this->x += other.x;
        this->y += other.y;
        this->z += other.z;
        return *this;
    }
//-----------------------------------------------------------------------------------------------------------
//													ВЫЧИТАНИЕ -=														
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t &operator -= (Vector3f_t &other)
    {
        this->x -= other.x;
        this->y -= other.y;
        this->z -= other.z;
        return *this;
    }
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t &operator -= (Vector3f_t &&other)
    {
        this->x -= other.x;
        this->y -= other.y;
        this->z -= other.z;
        return *this;
    }
//-----------------------------------------------------------------------------------------------------------
//												УМНОЖЕНИЕ НА ЧИСЛО *=														
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t &operator *= (double k)
    {
        this->x *= k;
        this->y *= k;
        this->z *= k;
        return *this;
    }
//-----------------------------------------------------------------------------------------------------------
//												ДЕЛЕНИЕ НА ЧИСЛО /=														
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t &operator /= (double k)
    {
        if(k == 0)
        {
            std::cout << "Error: division by \"0\"" << std::endl;
            return *this;
        }

        this->x /= k;
        this->y /= k;
        this->z /= k;
        return *this;
    }
//-----------------------------------------------------------------------------------------------------------
//											СКАЛЯРНОЕ ПРОИЗВЕДЕНИЕ *=														
//-----------------------------------------------------------------------------------------------------------
    double operator *= (Vector3f_t &other)
    {
        double result = 0;
        result = this->x * other.x + this->y * other.y + this->z * other.z;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
    double operator *= (Vector3f_t &&other)
    {
        double result = 0;
        result = this->x * other.x + this->y * other.y + this->z * other.z;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
//												УНАРНЫЙ МИНУС -														
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t operator - ()
    {
        Vector3f_t result {-this->x, -this->y, -this->z};
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
//												УНАРНЫЙ ПЛЮС +														
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t &operator + ()
    {
        return *this;
    }
//-----------------------------------------------------------------------------------------------------------
//												GET AND SET														
//-----------------------------------------------------------------------------------------------------------
    double getX()
    {
        return this->x;
    }
//-----------------------------------------------------------------------------------------------------------
    double getY()
    {
        return this->y;
    }
//-----------------------------------------------------------------------------------------------------------
    double getZ()
    {
        return this->z;
    }
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
    void setX(double in)
    {
        this->x = in;
    }
//-----------------------------------------------------------------------------------------------------------
    void setY(double in)
    {
        this->y = in;
    }
//-----------------------------------------------------------------------------------------------------------
    void setZ(double in)
    {
        this->z = in;
    }
//-----------------------------------------------------------------------------------------------------------
//                                               OTHER
//-----------------------------------------------------------------------------------------------------------
    void print() const
    {
        std::cout << "(" << this->x << ", " << this->y << ", " << this->z << ") " << std::endl;
    }
};


//-----------------------------------------------------------------------------------------------------------
//												СЛОЖЕНИЕ +														
//-----------------------------------------------------------------------------------------------------------
Vector3f_t operator + (const Vector3f_t &left, const Vector3f_t &right) 
{
    Vector3f_t result = left;
    result += right;
    return result;
}
//-----------------------------------------------------------------------------------------------------------
Vector3f_t operator + (Vector3f_t &left, Vector3f_t  &&right) 
{
    Vector3f_t result = left;
    result += right;
    return result;
}
//-----------------------------------------------------------------------------------------------------------
Vector3f_t operator + (Vector3f_t &&left, Vector3f_t &right) 
{
    Vector3f_t result = left;
    result += right;
    return result;
}
//-----------------------------------------------------------------------------------------------------------
Vector3f_t operator + (Vector3f_t &&left, Vector3f_t &&right) 
{
    Vector3f_t result = left;
    result += right;
    return result;
}
//-----------------------------------------------------------------------------------------------------------
//												ВЫЧИТАНИЕ -														
//-----------------------------------------------------------------------------------------------------------
Vector3f_t operator - (Vector3f_t &left, Vector3f_t &right) 
{
    Vector3f_t result = left;
    result -= right;
    return result;
}
//-----------------------------------------------------------------------------------------------------------
Vector3f_t operator - (Vector3f_t &left, Vector3f_t &&right) 
{
    Vector3f_t result = left;
    result -= right;
    return result;
}
//-----------------------------------------------------------------------------------------------------------
Vector3f_t operator - (Vector3f_t &&left, Vector3f_t &right) 
{
    Vector3f_t result = left;
    result -= right;
    return result;
}
//-----------------------------------------------------------------------------------------------------------
Vector3f_t operator - (Vector3f_t &&left, Vector3f_t &&right) 
{
    Vector3f_t result = left;
    result -= right;
    return result;
}
//-----------------------------------------------------------------------------------------------------------
//												УМНОЖЕНИЕ НА ЧИСЛО *														
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t operator * (Vector3f_t &v, double k)
    {
        Vector3f_t result = v;
        result *= k;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t operator * (double k, Vector3f_t &v)
    {
        Vector3f_t result = v;
        result *= k;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t operator * (Vector3f_t &&v, double k)
    {
        Vector3f_t result = v;
        result *= k;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t operator * (double k, Vector3f_t &&v)
    {
        Vector3f_t result = v;
        result *= k;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
//												ДЕЛЕНИЕ НА ЧИСЛО /														
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t operator / (Vector3f_t &v, double k)
    {
        Vector3f_t result = v;
        result /= k;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t operator / (double k, Vector3f_t &v)
    {
        Vector3f_t result = v;
        result /= k;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t operator / (Vector3f_t &&v, double k)
    {
        Vector3f_t result = v;
        result /= k;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
    Vector3f_t operator / (double k, Vector3f_t &&v)
    {
        Vector3f_t result = v;
        result /= k;
        return result;
    }
//-----------------------------------------------------------------------------------------------------------
//											СКАЛЯРНОЕ ПРОИЗВЕДЕНИЕ *														
//-----------------------------------------------------------------------------------------------------------
double operator * (Vector3f_t &left, Vector3f_t &right) 
{
    return (left *= right);
}
//-----------------------------------------------------------------------------------------------------------
double operator * (Vector3f_t &left, Vector3f_t &&right) 
{
    return (left *= right);
}
//-----------------------------------------------------------------------------------------------------------
double operator * (Vector3f_t &&left, Vector3f_t &right) 
{
    return (left *= right);
}
//-----------------------------------------------------------------------------------------------------------
double operator * (Vector3f_t &&left, Vector3f_t &&right) 
{
    return (left *= right);
}
//-----------------------------------------------------------------------------------------------------------
//											    COUT AND CIN												
//-----------------------------------------------------------------------------------------------------------
std::ostream &operator << (std::ostream &left, Vector3f_t &right)  
{
	left << "(" << right.getX() << ", " << right.getY() << ", " <<right.getZ() << ")" << std::endl; 
	return left;
}

std::ostream &operator << (std::ostream &left, Vector3f_t &&right)  
{
	left << "(" << right.getX() << ", " << right.getY() << ", " <<right.getZ() << ")" << std::endl; 
	return left;
}
//-----------------------------------------------------------------------------------------------------------
std::istream &operator >> (std::istream &left, Vector3f_t &right)  
{
    double x = 0, y = 0, z = 0;
	left >> x >> y >> z;
    right.setX(x);
    right.setY(y);
    right.setZ(z); 
	return left;
}
//-----------------------------------------------------------------------------------------------------------
//												СРАВНЕНИЕ == ADN !=														
//-----------------------------------------------------------------------------------------------------------
bool operator == (Vector3f_t &right, Vector3f_t &left)
{
    if(right.getX() == left.getX() && 
       right.getY() == left.getY() && 
       right.getZ() == left.getZ())
        return true;

    return false;
}
//-----------------------------------------------------------------------------------------------------------
bool operator == (Vector3f_t &right, Vector3f_t &&left)
{
    if(right.getX() == left.getX() && 
       right.getY() == left.getY() && 
       right.getZ() == left.getZ())
        return true;
        
    return false;
}
//-----------------------------------------------------------------------------------------------------------
bool operator == (Vector3f_t &&right, Vector3f_t &left)
{
    if(right.getX() == left.getX() && 
       right.getY() == left.getY() && 
       right.getZ() == left.getZ())
        return true;
        
    return false;
}
//-----------------------------------------------------------------------------------------------------------
bool operator == (Vector3f_t &&right, Vector3f_t &&left)
{
    if(right.getX() == left.getX() && 
       right.getY() == left.getY() && 
       right.getZ() == left.getZ())
        return true;
        
    return false;
}
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
bool operator != (Vector3f_t &right, Vector3f_t &left)
{
    if(right.getX() != left.getX() && 
       right.getY() != left.getY() && 
       right.getZ() != left.getZ())
        return true;

    return false;
}
//-----------------------------------------------------------------------------------------------------------
bool operator != (Vector3f_t &right, Vector3f_t &&left)
{
    if(right.getX() != left.getX() && 
       right.getY() != left.getY() && 
       right.getZ() != left.getZ())
        return true;
        
    return false;
}
//-----------------------------------------------------------------------------------------------------------
bool operator != (Vector3f_t &&right, Vector3f_t &left)
{
    if(right.getX() != left.getX() && 
       right.getY() != left.getY() && 
       right.getZ() != left.getZ())
        return true;
        
    return false;
}
//-----------------------------------------------------------------------------------------------------------
bool operator != (Vector3f_t &&right, Vector3f_t &&left)
{
    if(right.getX() != left.getX() && 
       right.getY() != left.getY() && 
       right.getZ() != left.getZ())
        return true;
        
    return false;
}
double squared_norm(Vector3f_t &v)
{
    return(v.getX() * v.getX() + v.getY() * v.getY() + v.getZ() * v.getZ());
}
//-----------------------------------------------------------------------------------------------------------
double norm(Vector3f_t &v)
{
    return sqrt(squared_norm(v));
}
//-----------------------------------------------------------------------------------------------------------
void normalize(Vector3f_t &v)
{
    double tmp = 0;
    tmp = norm(v);
    if(tmp != 0)
    {
        v /= tmp;
    }
}
