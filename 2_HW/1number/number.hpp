#pragma once

#include <iostream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <cstring>
//===========================================================================================================


/*
	Класс Number -- класс положительных больших чисел

	Большое число будет храниться в динамическом массиве data
	Каждый элемент этого массива содержит разряд числа в 100-ричной системе счисления
	(так как base = 100)
	По сути, каждый элемент data хранит две цифры числа в десятичной записи

	Значение 100 для системы счисления выбрано как компромис между
	эффективностью и удобством написания программы.
	Если выбрать значения базы 10 - то программа будет не так эффективна по памяти
	Если выбрать значения базы 256 (максимально эффективное использование памяти для типа char),
	то алгоритм печати на экран сильно усложнится
	В качестве альтернативы, можно было выбрать базу 1e9, 
	изменив при этом тип элементов c char на int

	capacity - размер массива data
	size - сколько ячеек занимет число в массиве data
	size <= capacity

	Для удобства разряды числа хранятся в обратном порядке
	Например, число 12345678 соответствует массиву
	data = {78, 56, 34, 12}
	(это упрощает многие алгоритмы с такими числами)
*/



class Number
{
private:
	static const int base = 100;
	size_t size;
	size_t capacity;
	char* data;
//-----------------------------------------------------------------------------------------------------------
//													КОНСТРУКТОРЫ
//-----------------------------------------------------------------------------------------------------------
public:
	Number();
	Number(int a);
	Number(const Number& n);
	Number(const std::string str);
//-----------------------------------------------------------------------------------------------------------
//												ДЕСТРУКТОР
//-----------------------------------------------------------------------------------------------------------
	~Number();
//-----------------------------------------------------------------------------------------------------------
//												ПРИСВАИВАНИЕ =														
//-----------------------------------------------------------------------------------------------------------
	Number& operator = (const Number& right);
//-----------------------------------------------------------------------------------------------------------
//												СЛОЖЕНИЕ +=														
//-----------------------------------------------------------------------------------------------------------
	Number& operator += (const Number& right);
//-----------------------------------------------------------------------------------------------------------
//												УМНОЖЕНИЕ *=														
//-----------------------------------------------------------------------------------------------------------
	Number& operator *= (const Number& right);
//-----------------------------------------------------------------------------------------------------------
//												OPERATORS COMPARISONS														
	bool operator == (const Number &other) const;
	bool operator != (const Number &other) const;
	bool operator >  (const Number &other) const;
	bool operator >= (const Number &other) const;
	bool operator <  (const Number &other) const;
	bool operator <= (const Number &other) const;
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
	void div2();
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
	void resize(size_t new_capacity);
//-----------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------
	bool isEven() const;
//-----------------------------------------------------------------------------------------------------------
	friend std::ostream& operator <<(std::ostream& stream, const Number& right);
//-----------------------------------------------------------------------------------------------------------
//												GET														
//-----------------------------------------------------------------------------------------------------------
// size, base, capacity, data
int    getBase() 	 const;
size_t getSize() 	 const;
size_t getCapacity() const;
char*  getData()     const;
};


std::ostream& operator <<(std::ostream& stream, const Number& right);
//-----------------------------------------------------------------------------------------------------------
Number operator + (const Number& left, const Number& right);
Number operator * (const Number& left, const Number& right);